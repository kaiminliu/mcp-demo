
# 需求描述
我想要使用 SpringBoot + JPA + Mysql5.7 + POI 技术栈 实现一个可以获取人员专案评分系统，主要的功能如下：
1、可以通过人员的工号、姓名、专案ID、专案名、分数精确查询出某个人的某些专案评分情况
    1.1、如果有传参，就按传参去查，没有就忽略掉传参，比如用户只传了 工号为W000001 的参数，那么就只查这个工号对应的得分记录，其他参数忽略掉
    1.2、如果传了工号和专案，那么只查出这个用户对于这个专案的得分记录，其他参数忽略掉
    1.3、如果这些参数都不传，那么就查询出所有的得分记录
2、可以新增得分记录，其中员工的工号、专案名、分数都是必填的，其他参数是选填，在新增得分记录之前，先根据员工工号查询出员工的其他信息，和根据专案名称查出对应专案其他信息，将查询的信息填入到未传参的参数里，如果参数有值就不填入
    1.1 若必填项没传，请报错提示用户填写
    2.2 若发现没有查出用户信息，请报错提示该用户不存在
    2.3 若发现没有查出专案信息，请报错提示该专案不存在
    2.4 若发现查出的信息和选填的内容不匹配，请报错提示用户填写的内容不匹配
    2.5 若发现查出的信息和选填的内容匹配，插入得分记录
3、可以通过用户工号查询用户记录，不传递工号时，查询的就是所有用户记录
4、可以通过专案名称模糊查询专案记录，不传递专案名称时，查询的就是所有专案记录
5、可以新增用户，用户的工号和姓名都是必填项
    5.1、若必填项没传，请报错提示用户填写
    5.2、若必填项都已填写，就使用用户工号从user表中查询，如果用户已存在，请报错提示系统中用户已存在；如果用户不存在，则可新增用户记录
6、可以新增专案，专案名称都是必填项
    6.1、若必填项没传，请报错提示用户填写
    6.2、若必填项都已填写，就使用专案名称从project表中查询，如果专案已存在，请报错提示系统中专案已存在；如果用户不存在，则可新增专案记录
7、可以删除专案，可以通过专案id或专案名称删除，而且删除前提是project_score中查不到该project的关联数据时，才能对该专案进行删除，否则请报错提示存在关联数据专案无法删除
8、可以删除用户，只能通过工号删除，而且删除前提时project_score中查不到该user的关联数据时，才能对该用户进行删除，否则请报错提示存在关联数据用户无法删除
9、可以删除用户专案的得分记录，只能通过专案名称和员工的工号进行删除，这两个传参都是必填项
10、可以通过人员的工号、姓名、专案ID、专案名、分数精确导出某个人的某些专案评分情况为excel文档
11、可以通过用户工号导出用户记录excel文档，不传递工号时，导出的就是所有用户记录
12、可以通过专案名称模糊查询导出专案记录excel文档，不传递专案名称时，导出的就是所有专案记录
13、可以通过用户工号更新用户的姓名，如果用户不存，请报错提示该用户不存在（注意，project_score表中对应工号的员工姓名也要更新）
14、可以通过专案ID更新专案名称，如果专案不存在，请提示该专案不存在（注意，project_score表中对应专案的名称也要更新）
15、可以通过用户工号和专案名称更新该用户该专案的得分记录（注意，用户工号和专案名称是必填项）


# 文件和数据库的编码统一配置为 UTF-8

# 数据库数据来源
mysql服务的地址 localhost:3306 账号是root 密码是123456

来自本文件同目录中的 project_score.csv 文件，表名是文件名（不带后缀），标题是第一行内容，数据是第二行及之后的内容；我希望这个数据不要立刻插入，等待 entity 实体类生成完毕后，结合实体类生成sql语句，我手动插入就行，生成的sql文件存放在项目根目录
除了这张表外，还需要你帮我
    1.生成user实体类及sql语句，其属性来自 project_score.csv 文件中 employee_id 和 employee_name 部分，其中 employee_id 是唯一键，除了这两个属性外，还有名叫id一个主键
    2.生成project实体类及sql语句，其属性来自 project_score.csv 文件中 project_id 和 project_name 部分，其中 project_id 是主键，在实体类和数据表中对于的属性名和字段名，都是id

在生成代码的时候，也请你帮我维护好，这三者之间的关系


# 项目遵守目录结构如下 （tree src/main/java）
└─com
    └─demo
        ├─common # 存放公用枚举类、常量类；后面是必须给我生成的：RtnCode枚举（这个RtnCode枚举包含 int code , string message 两个属性，枚举值均已大写单词下划线连接命名）；CommonResp返回类（这个CommonResp返回类，主要是controller类中方法返回类型，这个类包含 int code, string message, T data三个属性，其中T是泛型）
        ├─config # 存放Spring Configuration配置类及相关文件
        ├─controller # 存放前端控制器，主要处理来自前端的请求和接受业务类的响应，这些控制器均以 Controller结尾命名，比如 UserController
        ├─dao    # 存放JPA Repository持久化类，这些接口主要以 Repository结尾命名，比如 userRepository
        ├─dto    # 存放数据传输对象，主要体现在service返回的对象类型，这些对象统一以DTO结尾命名，比如 userDTO
        ├─entity # 存放实体类，与数据库表结构对应（类名采用首字母大写驼峰命名，属性名采用首字母小写驼峰命名，要求lombok生成setter和getter；实体类对应表名和字段名均采用小写单词下划线连接命名；当项目首次运行的时候自动创建表及表结构），实体类均以 PO结尾，比如userPO
        ├─exception # 存放自定义异常类，和全局异常处理类，这个请你帮我生成，所有的自定义报错都使用 throw new CustomException(RtnCode.XXX)，XXX为报错时的异常枚举值; 形式抛出，由全局异常处理类接受处理
        ├─service # 存放业务接口，这些接口主要以 Service结尾命名，比如 userService
        │  └─impl # 存放业务接口对应的实现类，这些实现类主要以 ServiceImpl结尾命名，比如 userServiceImpl
        ├─util #  存放其他类应用的工具类，均以 Util结尾命名，比如 HttpUtil
        └─vo # 存放视图对象，主要体现在controller类中方法传参使用的类型，这些类均以 VO 结尾命名， 比如 userVO

# 所有的实体类都要继承BasePO，BasePO包含2个属性，分别是createdTime，updatedTime，分别记录创建时间和更新时间，这个也请帮我添加到数据库表结构和init.sql中去，且保证在新增数据的时候，createdTime为当前时间，更新数据的时候，updatedTime为当前时间

# controller 接口规范
1、控制器类声明都加上 @RestController注解，并且接口url不要带字符s，比如UserController的url是/api/user
2、新增和修改的接口用 PostMapping，参数用RequestBody或RequestParam修饰
3、查询的接口，如何少数传参（低于3个）用GetMapping修饰，参数用RequestParam修饰；如果传参比较多，用PostMapping修饰，参数用RequestBody修饰
4、删除的接口用 PostMapping，参数用RequestBody或RequestParam修饰
5、每个接口的url都要有，且是方法名


# 帮我生成这些接口的测试用例